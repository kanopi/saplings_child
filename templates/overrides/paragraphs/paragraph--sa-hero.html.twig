{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('saplings_child/hero-video') }}
{{ attach_library('saplings_child/hero-video-youtube') }}
{{ attach_library('saplings_child/fontawesome') }}

{% if paragraph.sa_justify_content_vertically.value is not empty %}
  {% set align = paragraph.sa_justify_content_vertically.value %}
{% endif %}

{% set hero_media = content.sa_hero_background[0]['#media'].bundle.value[0].target_id %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    align,
    hero_media,
    'bg-primary',
    'bg-lg-none'
  ]
%}

{% set container_class_string = 'container' %}
{% if paragraph.sa_container.value is not empty %}
  {% set container_class_string = ' ' ~ paragraph.sa_container.value %}
{% endif %}

{% set width_class_string = '' %}
{% if paragraph.sa_width.value is not empty %}
  {% set width_class_string = ' ' ~ paragraph.sa_width.value %}
{% endif %}

{% set margin_class_string = '' %}
{% if paragraph.sa_margin.value is not empty %}
  {% set margin_class_string = ' ' ~ paragraph.sa_margin.value %}
{% endif %}

{% set padding_class_string = '' %}
{% if paragraph.sa_padding.value is not empty %}
  {% set padding_class_string = ' ' ~ paragraph.sa_padding.value %}
{% endif %}

{% set justify = '' %}
{% if paragraph.sa_justify_content_horizontal.value is not empty %}
  {% set justify = ' ' ~ paragraph.sa_justify_content_horizontal.value %}
{% endif %}

{% set align = '' %}
{% if paragraph.sa_align_items_vertically.value is not empty %}
  {% set align = ' ' ~ paragraph.sa_align_items_vertically.value %}
{% endif %}

{# Renders Overlay field. #}
{# Sets data attibute value from values in database. #}
{% if paragraph.sa_overlay.value is not empty %}
  {% set attributes = attributes.setAttribute('data-overlay', paragraph.sa_overlay.value) %}
{% endif %}

{% block paragraph %}

<div{{ attributes.addClass(classes) }}>
  {% if paragraph.sa_hero_background.value is not empty %}
    {% if content.sa_hero_background[0]['#media'].bundle.value.0.target_id == 'image' %}
      <div class="hero-image">
        {{ content.sa_hero_background }}
      </div>
    {% elseif content.sa_hero_background[0]['#media'].bundle.value.0.target_id == 'remote_video' %}
      <div class="hero-image" {% if content.sa_include_pause_button[0]['#markup'] == '1' %}data-vbg-play-button="true"{% endif %} {% if content.sa_include_mute_button[0]['#markup'] == '1' %}data-vbg-mute-button="true"{% endif %} data-vbg="{{ content.sa_hero_background[0]['#media'].field_media_oembed_video.0.value }}"></div>
    {% else %}
      <div class="hero-image" {% if content.sa_include_pause_button[0]['#markup'] == '1' %}data-vbg-play-button="true"{% endif %} {% if content.sa_include_mute_button[0]['#markup'] == '1' %}data-vbg-mute-button="true"{% endif %} data-vbg="{{ file_url(content.sa_hero_background[0]['#media'].field_media_video_file.entity.uri.value) }}"></div>
    {% endif %}
  {% endif %}
  <div class="{{ container_class_string }}{{ margin_class_string }}{{ padding_class_string }} ">
    {% if paragraph.sa_width.value is not empty %}
      <div class="row {{ justify }}">
        <div class="{{ width_class_string }}">
    {% endif %}
    {% block content %}
    {% if paragraph.sa_hero_content.value is not empty %}
      <div class="hero-content">
        <div class="text-wrapper">
          {{ content.sa_hero_content }}
        </div>
      </div>
    {% endif %}
    {% endblock %}
    {% if paragraph.sa_width.value is not empty %}
        </div>
      </div>
    {% endif %}
  </div>
</div>
{% endblock paragraph %}
